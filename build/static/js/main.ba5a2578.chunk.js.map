{"version":3,"sources":["Service/person.js","Filter.js","Notification.js","PersonForm.js","PhoneBook.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","showFilter","setshowFilter","value","onChange","e","target","styles","success","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","fail","Notification","notification","className","style","PersonForm","newName","newNumber","addNewName","handleNameChange","handleNumberChange","onSubmit","type","PhoneBook","persons","removeEntry","filterUpperCase","toUpperCase","filter","person","name","includes","map","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setNotification","setSuccess","useEffect","personsService","catch","error","showMessage","message","successNotification","setTimeout","preventDefault","personObject","some","personId","find","item","updatedEntry","Object","assign","window","confirm","n","returnedPerson","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEMA,EAAU,eA8BD,EA1BA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAwB9B,EApBA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAkB9B,EAdA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAY9B,EARA,SAACG,GAEd,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAACC,GAAD,OAAcA,EAASC,SCZ9BM,EAZA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAK5B,OACE,qDACoB,uBAAOC,MAAOF,EAAYG,SAN1B,SAAAC,GACpBH,EAAcG,EAAEC,OAAOH,cCsBvBI,EAAS,CACXC,QAAS,CACPC,MAAO,QACPC,WAAY,QACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAEhBC,KAAM,CACJP,MAAO,MACPC,WAAY,QACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,KAIHE,EA7CM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,aAAcV,EAAc,EAAdA,QAKpC,OAAqB,OAAjBU,EACK,KAILV,EAEA,qBAAKW,UAAU,UAAUC,MAAOb,EAAOC,QAAvC,SACGU,IAKH,qBAAKC,UAAU,UAAUC,MAAOb,EAAOS,KAAvC,SACGE,KCOMG,EA1BI,SAAC,GAMb,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,mBAEA,OAEE,uBAAMC,SAAUH,EAAhB,UACE,yCAEQ,uBAAOrB,MAAOmB,EAASlB,SAAUqB,OAEzC,2CAEU,uBAAOtB,MAAOoB,EAAWnB,SAAUsB,OAE7C,8BAEE,wBAAQE,KAAK,SAAb,uBCDOC,EAnBG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAAS7B,EAA8B,EAA9BA,WAAY8B,EAAkB,EAAlBA,YAEpCC,EAAkB/B,EAAWgC,cASjC,OANqBH,EAAQI,QAAO,SAAAC,GAElC,OADwBA,EAAOC,KAAKH,cACXI,SAASL,MAIdM,KAAI,SAAAH,GAAM,OAC9B,+BACGA,EAAOC,KADV,MACmBD,EAAOI,OACxB,wBAAQC,QAAS,kBAAMT,EAAYI,IAAnC,sBAFOA,EAAOC,UC4KLK,EAjLH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTZ,EADS,KACAa,EADA,OAEcD,mBAAS,IAFvB,mBAETpB,EAFS,KAEAsB,EAFA,OAGkBF,mBAAS,IAH3B,mBAGTnB,EAHS,KAGEsB,EAHF,OAIoBH,mBAAS,IAJ7B,mBAITzC,EAJS,KAIGC,EAJH,OAKwBwC,mBAAS,MALjC,mBAKTxB,EALS,KAKK4B,EALL,OAMcJ,mBAAS,MANvB,mBAMTlC,EANS,KAMAuC,EANA,KAShBC,qBAAU,WACRC,IAEGzD,MAAK,SAACC,GACLkD,EAAWlD,MAEZyD,OAAM,SAACC,GAAD,OAAWC,EAAY,2BAA2B,QAC1D,IAEH,IA2HMA,EAAc,SAACC,GAAyC,IAAhCC,IAA+B,yDAE3DR,EAAgBO,GAEhBN,EAAWO,GAGXC,YAAW,WACTT,EAAgB,MAChBC,EAAW,QACV,MAGL,OACE,gCACE,2CACA,cAAC,EAAD,CAAc7B,aAAcA,EAAcV,QAASA,IACnD,cAAC,EAAD,CAAQP,WAAYA,EAAYC,cAAeA,IAC/C,2CACA,cAAC,EAAD,CACEsB,WA/Ia,SAACnB,GAClBA,EAAEmD,iBACF,IAAMC,EAAe,CACnBrB,KAAMd,EACNiB,OAAQhB,GAIV,GAAIO,EAAQ4B,MAAK,SAACrD,GAAD,OAAOA,EAAE+B,OAASd,KAAU,CAE3C,IAAIqC,EAAW7B,EAAQ8B,MAAK,SAACC,GAAD,OAAUA,EAAKzB,OAASd,KAGhDwC,EAAeC,OAAOC,OAAOL,EAAUF,GAIzCQ,OAAOC,QAAP,gCAC2B5C,EAD3B,wBACkDC,EADlD,OAKA0B,EACUU,EAAS9D,GAAI4D,GACpBjE,MAAK,WACJmD,EAGEb,EAAQQ,KAAI,SAACuB,GAAD,OACVA,EAAKzB,OAASd,EAAUwC,EAAeD,MAI3CjB,EAAW,IACXC,EAAa,IAEbO,EAAY,QAAD,OAAS9B,EAAT,6BAEZ4B,OAAM,SAACC,GACNC,EAAY,uBAAD,OACc9B,EADd,mDAET,GAEFqB,EAAWb,EAAQI,QAAO,SAACiC,GAAD,OAAOA,EAAE/B,OAASd,cAK9CQ,EAAQ4B,MAAK,SAACrD,GAAD,OAAOA,EAAEkC,SAAWhB,KACnC6B,EAAY,KAAD,OAAM7B,EAAN,mCAAiD,GAG5C,KAAZD,GAAgC,KAAdC,EACpB6B,EAAY,yCAAyC,IAGrDH,EACUQ,GACPjE,MAAK,SAAC4E,GACLzB,EAAWb,EAAQuC,OAAOD,IAE1BxB,EAAW,IACXC,EAAa,IAEbO,EAAY,QAAD,OAAS9B,EAAT,yCAEZ4B,OAAM,SAACC,GAEN,OAAOC,EAAY,2CAAD,OAC2BD,EAAM1D,SAASC,KAAKyD,QAC/D,MAINF,IAEGzD,MAAK,SAACC,GACLkD,EAAWlD,MAEZyD,OAAM,SAACC,GAAD,OAAWC,EAAY,2BAA2B,QAiE7D9B,QAASA,EACTG,iBAhCmB,SAACpB,GAExBuC,EAAWvC,EAAEC,OAAOH,QA+BhBuB,mBA3BqB,SAACrB,GAC1BwC,EAAaxC,EAAEC,OAAOH,UA4BpB,yCACA,6BACE,cAAC,EAAD,CACE2B,QAASA,EACT7B,WAAYA,EACZ8B,YApEY,SAACI,GAEf8B,OAAOC,QAAP,iBAAyB/B,EAAOC,KAAhC,OAEFa,EACUd,EAAOtC,IACdL,MAAK,WAEJmD,EAAWb,EAAQI,QAAO,SAAC2B,GAAD,OAAUA,EAAKhE,KAAOsC,EAAOtC,OACvDuD,EAAY,GAAD,OAAIjB,EAAOC,KAAX,6CAEZc,OAAM,SAACC,GACNC,EAAY,wBAAD,OACejB,EAAOC,KADtB,mDAET,GAGFa,IAEGzD,MAAK,SAACC,GACLkD,EAAWlD,MAEZyD,OAAM,SAACC,GAAD,OAAWC,EAAY,2BAA2B,kBC1HtDkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ba5a2578.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n// const baseUrl = \"/api/persons\";\r\n\r\n// get request for all of json data\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// post request to add new entry\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// put request to update json db\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// delete request to delete from json data base\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n  \r\n   \r\n// exporting all of the functions\r\nexport default { \r\ngetAll: getAll,\r\ncreate: create,\r\nupdate: update,\r\nremove: remove\r\n}","import React from \"react\";\r\n\r\nconst Filter = ({ showFilter, setshowFilter }) => {\r\n  const filterPersons = e => {\r\n    setshowFilter(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      filter shown with <input value={showFilter} onChange={filterPersons} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nconst Notification = ({ notification, success }) => {\r\n  // console.log(notification);\r\n  // console.log(success);\r\n\r\n  // if there is no notification return null\r\n  if (notification === null) {\r\n    return null;\r\n  }\r\n\r\n  // if success renders the paticular (inLine) style \r\n  if (success)\r\n    return (\r\n      <div className=\"success\" style={styles.success}>\r\n        {notification}\r\n      </div>\r\n    );\r\n  else\r\n    return (\r\n      <div className=\"success\" style={styles.fail}>\r\n        {notification}\r\n      </div>\r\n    );\r\n};\r\n\r\nvar styles = {\r\n  success: {\r\n    color: \"green\",\r\n    background: \"white\",\r\n    fontSize: 20,\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  },\r\n  fail: {\r\n    color: \"red\",\r\n    background: \"white\",\r\n    fontSize: 20,\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n};\r\n\r\nexport default Notification;","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n  newName,\r\n  newNumber,\r\n  addNewName,\r\n  handleNameChange,\r\n  handleNumberChange\r\n}) => {\r\n  return (\r\n    \r\n    <form onSubmit={addNewName}>\r\n      <div>\r\n      {/* calls the function tracking values in the name input */}\r\n        name: <input value={newName} onChange={handleNameChange} />\r\n      </div>\r\n      <div>\r\n       {/* calls the function tracking values in the numer input */}\r\n        number: <input value={newNumber} onChange={handleNumberChange} />\r\n      </div>\r\n      <div>\r\n       {/* calls the create request to add name and number */}\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;","import React from \"react\";\r\n\r\nconst PhoneBook = ({ persons, showFilter, removeEntry }) => {\r\n  // capitalize whats in the filter inputs  \r\n  let filterUpperCase = showFilter.toUpperCase();\r\n  \r\n  // filter though persons based on filter inputs value\r\n  let newPersonArray = persons.filter(person => {\r\n    let personInUpperCase = person.name.toUpperCase();\r\n    return personInUpperCase.includes(filterUpperCase);\r\n  });\r\n\r\n  // loop through newPersonArray and creat an li for each element\r\n  return newPersonArray.map(person => (\r\n    <li key={person.name}>\r\n      {person.name} : {person.number}\r\n      <button onClick={() => removeEntry(person)}>Delete</button>\r\n    </li>\r\n  ));\r\n};\r\n\r\nexport default PhoneBook;","import React, { useState, useEffect } from \"react\";\n// importing a modual personsService\nimport personsService from \"./Service/person\";\nimport Filter from \"./Filter\";\nimport Notification from \"./Notification\";\nimport PersonForm from \"./PersonForm\";\nimport PhoneBook from \"./PhoneBook\";\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showFilter, setshowFilter] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // show data on the screen\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then((response) => {\n        setPersons(response);\n      })\n      .catch((error) => showMessage(\"Could not retrieve data\", false));\n  }, []);\n\n  const addNewName = (e) => {\n    e.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    // if name is already in phone book return true and alert user\n    if (persons.some((e) => e.name === newName)) {\n      // first name equal to that name\n      let personId = persons.find((item) => item.name === newName);\n\n      // assigning whats in person obj to person id to update the entry\n      let updatedEntry = Object.assign(personId, personObject);\n\n      // alert the user  to update name  and / or  number\n      if (\n        window.confirm(\n          `Do you want to update ${newName} with number ${newNumber}?`\n        )\n      ) {\n        // based on the condition it will make put request to update\n        personsService\n          .update(personId.id, personObject)\n          .then(() => {\n            setPersons(\n              // map through persons check if name is equal to new name\n              //and either return updatedEntry or item\n              persons.map((item) =>\n                item.name === newName ? updatedEntry : item\n              )\n            );\n            // reset inputs\n            setNewName(\"\");\n            setNewNumber(\"\");\n            // alert user of the changes\n            showMessage(`User ${newName} phone number updated`);\n          })\n          .catch((error) => {\n            showMessage(\n              `Update failed. User ${newName} has already been removed from the phone book.`,\n              false\n            );\n            setPersons(persons.filter((n) => n.name !== newName));\n          });\n      }\n    } else {\n      // if number is already in phone book return true and alert user\n      if (persons.some((e) => e.number === newNumber)) {\n        showMessage(`# ${newNumber} is already in the phone book.`, false);\n      } else {\n        // check if inputs are empty and set show message\n        if (newName === \"\" || newNumber === \"\") {\n          showMessage(`The name and number must not be empty`, false);\n        } else {\n          // add personObject to the data base\n          personsService\n            .create(personObject)\n            .then((returnedPerson) => {\n              setPersons(persons.concat(returnedPerson));\n              // reset inputs\n              setNewName(\"\");\n              setNewNumber(\"\");\n              // alert user\n              showMessage(`User ${newName} has been added to the phone book`);\n            })\n            .catch((error) => {\n              // console.log(error.response.data.error);\n              return showMessage(\n                `Failed to add number. More about error: ${error.response.data.error}`,\n                false\n              );\n            });\n          // make a get requests of updated data\n          personsService\n            .getAll()\n            .then((response) => {\n              setPersons(response);\n            })\n            .catch((error) => showMessage(\"Could not retrieve data\", false));\n        }\n      }\n    }\n  };\n\n  const removeEntry = (person) => {\n    // if user clicks yes to remove\n    if (window.confirm(`Remove ${person.name}?`)) {\n      // call delete request with id that needs to be deleted\n      personsService\n        .remove(person.id)\n        .then(() => {\n          // setPerson to filtered array of every preson but the deleted person\n          setPersons(persons.filter((item) => item.id !== person.id));\n          showMessage(`${person.name} has been removed from the phone book`);\n        })\n        .catch((error) => {\n          showMessage(\n            `Removal failed. User ${person.name} has already been removed from the phone book.`,\n            false\n          );\n          // make a get requests of updated data\n          personsService\n            .getAll()\n            .then((response) => {\n              setPersons(response);\n            })\n            .catch((error) => showMessage(\"Could not retrieve data\", false));\n        });\n    }\n  };\n\n  // tracking values in the name input\n  const handleNameChange = (e) => {\n    // console.log(e.target.value);\n    setNewName(e.target.value);\n  };\n\n  // tracking values in the number input\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const showMessage = (message, successNotification = true) => {\n    // sets notication based on the true or false given by the condiyion it was called in\n    setNotification(message);\n    // boolean value if the rquest was successful or not\n    setSuccess(successNotification);\n\n    // the notification will stay on browser for 3 sec\n    setTimeout(() => {\n      setNotification(null);\n      setSuccess(null);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} success={success} />\n      <Filter showFilter={showFilter} setshowFilter={setshowFilter} />\n      <h2>add a new</h2>\n      <PersonForm\n        addNewName={addNewName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <ul>\n        <PhoneBook\n          persons={persons}\n          showFilter={showFilter}\n          removeEntry={removeEntry}\n        />\n      </ul>\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}